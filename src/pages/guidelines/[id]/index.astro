---
import { getCollection, getEntry } from "astro:content";
import PageHeading from "@components/decoratives/Headings/PageHeading.astro";
import GuidelineContentSection from "@components/pages/guidelines/GuidelineContentSection/GuidelineContentSection.astro";
import GuidelineNavigation from "@components/pages/guidelines/GuidelineNavigation/GuidelineNavigation.astro";
import { getMeta } from "@content/meta";
import Layout from "@layouts/Layout.astro";
import { replaceByMap } from "@lib/utils/string";
import { css } from "@styles/css";

export async function getStaticPaths() {
  const guidelines = await getCollection("guidelines");

  return guidelines.map(({ id }) => ({
    params: { id },
  }));
}

const { id } = Astro.params;

const {
  guideline: { title, description, keywords },
} = await getMeta();

const { data: guideline } = (await getEntry("guidelines", id)) ?? {
  data: undefined,
};

if (!guideline) {
  return new Response("Not Found", { status: 404 });
}

const { thumbnail, themeColor, content } = guideline;

const mainClass = css({
  display: "flex",
  flexDir: "column",
  alignItems: "center",
});

const contentClass = css({
  paddingTop: "26",
  paddingBottom: "42",

  w: {
    base: "96",
    _pc: "160",
  },
});

// ページメタデータの前処理
const pageTitle = replaceByMap(title, guideline);
const pageDescription = replaceByMap(description, guideline);
const pageKeywords = [
  ...keywords.map((k) => replaceByMap(k, guideline)),
  ...guideline.keywords,
];
---

<Layout
  headMeta={{
    title: pageTitle,
    description: pageDescription,
    keywords: pageKeywords,
  }}
  ogp={{
    title: pageTitle,
    type: "article",
    image: {
      url: thumbnail,
    },
  }}
  sns={{
    twitter: {
      title: pageTitle,
      description: pageDescription,
      image: thumbnail,
    },
  }}
  themeColor={themeColor}
  mainClass={mainClass}
>
  <PageHeading img={thumbnail}> {pageTitle} </PageHeading>
  <GuidelineContentSection contentHtml={content} class={contentClass} />
  <GuidelineNavigation />
</Layout>
