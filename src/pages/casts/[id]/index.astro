---
import { getCollection, getEntry } from "astro:content";
import type { OGPImage } from "@components/layouts/HeadMeta/internals/ogpType";
import CastImageSection from "@components/pages/cast/CastImageSection/CastImageSection.astro";
import CastNavigator from "@components/pages/cast/CastNavigator/CastNavigator.astro";
import CastProfileSection from "@components/pages/cast/CastProfileSection/CastProfileSection.astro";
import type { SocialLinkType } from "@content/commons";
import { getMeta } from "@content/meta";
import Layout from "@layouts/Layout.astro";
import { getOgpImage } from "@lib/utils/image";
import { replaceByMap } from "@lib/utils/string";
import { toAbsoluteUrl } from "@lib/utils/url";

export async function getStaticPaths() {
  const casts = await getCollection("casts");

  return casts.map((cast) => ({ params: { id: cast.id } }));
}

const { id } = Astro.params;

const {
  cast: { title, description, keywords },
} = await getMeta();

const { data: cast } = (await getEntry("casts", id)) ?? { data: undefined };

if (!cast) {
  return new Response("Not Found", { status: 404 });
}

const { themeColor, socialLinks, thumbnail, profile } = cast;
const { nickname } = profile;

const defineLogos = [
  ...socialLinks.map((link) => link.type),
  "vrchat",
] as const satisfies SocialLinkType[];

const ogpImage = await getOgpImage(thumbnail);
---

<Layout
  defineIcons={["lucide-copyright"]}
  defineLogos={defineLogos}
  headMeta={{
    title: replaceByMap(title, cast.profile),
    description: replaceByMap(description, cast.profile),
    keywords: keywords.map((k) => replaceByMap(k, cast.profile)),
  }}
  ogp={{
    title: replaceByMap(title, cast.profile),
    type: "profile",
    image: {
      url: ogpImage.src,
      width: ogpImage.attributes.width,
      height: ogpImage.attributes.height,
      type: `image/${ogpImage.options.format}` as OGPImage["type"],
    },
    content: {
      profile: {
        username: cast.profile.nickname,
      },
    },
  }}
  sns={{
    twitter: {
      title: replaceByMap(title, cast.profile),
      description: replaceByMap(description, cast.profile),
      image: ogpImage.src,
      imageAlt: ogpImage.attributes.alt,
    },
  }}
  jsonLd={[
    {
      "@context": "https://schema.org",
      "@type": "ProfilePage",
      name: nickname,
      image: toAbsoluteUrl(ogpImage.src, Astro.site),
      url: Astro.url.href,
      mainEntity: {
        "@type": "Person",
        name: nickname,
      },
    },
    {
      "@context": "https://schema.org",
      "@type": "BreadcrumbList",
      itemListElement: [
        {
          "@type": "ListItem",
          position: 1,
          name: "ホーム",
          item: toAbsoluteUrl("/", Astro.site),
        },
        {
          "@type": "ListItem",
          position: 2,
          name: "キャスト",
          item: toAbsoluteUrl("/casts/", Astro.site),
        },
        {
          "@type": "ListItem",
          position: 3,
          name: nickname,
          item: Astro.url.href,
        },
      ],
    },
  ]}
  themeColor={themeColor}
  polyfill={{
    invokers: true,
    anchorPosition: true,
  }}
>
  <CastImageSection nickname={id} />
  <CastProfileSection nickname={id} />
  <CastNavigator nickname={id} themeColor={themeColor} />
</Layout>
