---
import { getCollection } from "astro:content";
// biome-ignore lint/suspicious/noTsIgnore: ファイルが動的に作られるため
// @ts-ignore ファイルが動的に作られるため
import heroThumbnail from "@assets/videos/top.generated.thumbnail.webp";
import type { OGPImage } from "@components/layouts/HeadMeta/internals/ogpType";
import CastPickupSection from "@components/pages/home/CastPickupSection/CastPickupSection.astro";
import HeroSection from "@components/pages/home/HeroSection/HeroSection.astro";
import NewsHeadlineSection from "@components/pages/home/NewsHeadlineSection/NewsHeadlineSection.astro";
import { getMeta } from "@content/meta";
import Layout from "@layouts/Layout.astro";
import { sortByDesc } from "@lib/utils/array";
import { getOgpImage } from "@lib/utils/image";
import { toAbsoluteUrl } from "@lib/utils/url";
import { css } from "@styles/css";

const mainClass = css({
  display: "flex",
  flexDir: "column",
  scrollSnapType: "y",
  scrollSnapStrictness: "proximity",
});

const {
  home: { description, keywords, thumbnail },
} = await getMeta();

const ogpImage = await getOgpImage(thumbnail);

// 直近5件のarticles
const articles = await getCollection("articles");
const recentArticles = sortByDesc(articles, (article) =>
  new Date(article.data.publishedAt).getTime(),
).slice(0, 5);
---

<Layout
  headMeta={{
    title: "ロリっ子喫茶ぷぷりえ",
    description,
    keywords,
  }}
  ogp={{
    title: "ロリっ子喫茶ぷぷりえ",
    type: "website",
    image: {
      url: toAbsoluteUrl(ogpImage.src, Astro.site),
      width: ogpImage.attributes.width,
      height: ogpImage.attributes.height,
      type: `image/${ogpImage.options.format}` as OGPImage["type"],
    },
  }}
  sns={{
    twitter: {
      title: "ロリっ子喫茶ぷぷりえ",
      description,
      image: ogpImage.src,
      imageAlt: ogpImage.attributes.alt,
    },
  }}
  jsonLd={[
    {
      "@context": "https://schema.org",
      "@type": "Organization",
      name: "ロリっ子喫茶ぷぷりえ",
      url: toAbsoluteUrl("/", Astro.site),
      image: toAbsoluteUrl(ogpImage.src, Astro.site),
      description,
    },
    {
      "@context": "https://schema.org",
      "@type": "BreadcrumbList",
      itemListElement: [
        {
          "@type": "ListItem",
          position: 1,
          name: "ホーム",
          item: toAbsoluteUrl("/", Astro.site),
        },
      ],
    },
    {
      "@context": "https://schema.org",
      "@type": "ItemList",
      name: "最近の記事",
      url: toAbsoluteUrl("/articles", Astro.site),
      itemListElement: recentArticles.map((article, index) => ({
        "@type": "ListItem",
        position: index + 1,
        url: toAbsoluteUrl(`/articles/${article.id}`, Astro.site),
        name: article.data.title,
      })),
    },
  ]}
  mainClass={mainClass}
  defineShapes={["letter", "star"]}
>
  <Fragment slot="head">
    {
      /* トップの動画が未読込のときに出すポスター画像を fetchpriority: "high" で取得する */
    }
    <link
      rel="preload"
      href={heroThumbnail.src}
      as="image"
      type="image/webp"
      fetchpriority="high"
    />
  </Fragment>
  <HeroSection />
  <NewsHeadlineSection />
  <CastPickupSection />
</Layout>
