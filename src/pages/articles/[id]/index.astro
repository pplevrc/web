---
import { getCollection, getEntry } from "astro:content";
import PageHeading from "@components/decoratives/Headings/PageHeading.astro";
import type { OGPImage } from "@components/layouts/HeadMeta/internals/ogpType";
import ArticleContentSection from "@components/pages/articles/ArticleContentSection/ArticleContentSection.astro";
import ArticleNavigation from "@components/pages/articles/ArticleNavigation/ArticleNavigation.astro";
import { getMeta } from "@content/meta";
import Layout from "@layouts/Layout.astro";
import { getOgpImage } from "@lib/utils/image";
import { replaceByMap } from "@lib/utils/string";
import { toAbsoluteUrl } from "@lib/utils/url";
import { css } from "@styles/css";

export async function getStaticPaths() {
  const articles = await getCollection("articles");

  return articles.map(({ id }) => ({
    params: { id },
  }));
}

const { id } = Astro.params;

const {
  article: { title, description, keywords },
} = await getMeta();

const { data: article } = (await getEntry("articles", id)) ?? {
  data: undefined,
};

if (!article) {
  return new Response("Not Found", { status: 404 });
}

const {
  keywords: articleKeywords,
  thumbnail,
  themeColor,
  content,
  thumbnailLabel,
  publishedAt,
} = article;

const mainClass = css({
  display: "flex",
  flexDir: "column",
  alignItems: "center",
});

const contentClass = css({
  minHeight: "192",
  paddingTop: "26",
  paddingBottom: "42",
});

// ページメタデータの前処理
const pageTitle = replaceByMap(title, article);
const pageDescription = replaceByMap(description, article);
const pageKeywords = [
  ...keywords.map((k) => replaceByMap(k, article)),
  ...articleKeywords,
];

const ogpImage = await getOgpImage(thumbnail);
---

<Layout
  headMeta={{
    title: pageTitle,
    description: pageDescription,
    keywords: pageKeywords,
  }}
  ogp={{
    title: pageTitle,
    type: "article",
    image: {
      url: toAbsoluteUrl(ogpImage.src, Astro.site),
      width: ogpImage.attributes.width,
      height: ogpImage.attributes.height,
      type: `image/${ogpImage.options.format}` as OGPImage["type"],
    },
    content: {
      article: {
        publishedTime: publishedAt,
      },
    },
  }}
  sns={{
    twitter: {
      title: pageTitle,
      description: pageDescription,
      image: ogpImage.src,
      imageAlt: ogpImage.attributes.alt,
    },
  }}
  jsonLd={[
    {
      "@context": "https://schema.org",
      "@type": "Article",
      headline: pageTitle,
      description: pageDescription,
      image: toAbsoluteUrl(ogpImage.src, Astro.site),
      datePublished: new Date(publishedAt).toISOString(),
      url: Astro.url.href,
    },
    {
      "@context": "https://schema.org",
      "@type": "BreadcrumbList",
      itemListElement: [
        {
          "@type": "ListItem",
          position: 1,
          name: "ホーム",
          item: toAbsoluteUrl("/", Astro.site),
        },
        {
          "@type": "ListItem",
          position: 2,
          name: "記事一覧",
          item: toAbsoluteUrl("/articles/", Astro.site),
        },
        {
          "@type": "ListItem",
          position: 3,
          name: pageTitle,
          item: Astro.url.href,
        },
      ],
    },
  ]}
  themeColor={themeColor}
  mainClass={mainClass}
  defineShapes={["star"]}
>
  <PageHeading img={thumbnail}>{pageTitle}</PageHeading>
  <ArticleContentSection
    contentHtml={content}
    thumbnail={thumbnail}
    thumbnailDisplayAlt={thumbnailLabel ?? ""}
    title={replaceByMap(title, article)}
    themeColor={themeColor}
    publishedAt={new Date(publishedAt)}
    class={contentClass}
  />
  <ArticleNavigation />
</Layout>
