---
import CustomPicture from "@components/commons/CustomPicture/CustomPicture.astro";
import { SP_MAX_WIDTH, SP_ROOT_FONT_SCALE } from "@lib/browsers/breakpoint";
import type { Avatar } from "@lib/contents/casts";
import { remToSizePercent } from "@lib/utils/image";
import { css } from "@styles/css";
import type { HTMLAttributes } from "astro/types";
import defu from "defu";
import { toWidths } from "./common";

type Type = keyof Avatar["images"];

export interface Props
  extends Omit<HTMLAttributes<"picture">, "width" | "height"> {
  /**
   * 店員さんのニックネーム
   */
  nickname: string;

  /**
   * 店員さんアバターの登録順インデックス (0 は 必ず登録される)
   * @default 0
   */
  avatarIndex?: number;

  /**
   * アバター画像の表情
   * @default "neutral"
   */
  expression?: Type;

  /**
   * Picture Component に指定する alt 属性
   */
  alt?: string;

  /**
   * viewportが ${PC_VIEWPORT_WIDTH}*2 px に対して指定する画像幅
   * 例えば, 表示領域が { w: "64" } (16rem) の場合, 512px を指定する
   */
  width: number;

  /**
   * viewport が ${PC_VIEWPORT_WIDTH}*2 px に対して指定する画像高さ
   * 例えば, 表示領域が { h: "64" } (16rem) の場合, 512px を指定する
   */
  height: number;

  /**
   * アウトラインの幅
   * none .. 0px
   * medium .. 3px
   * strong .. 5px
   * @default "medium"
   */
  outline?: "none" | "medium" | "strong";
}

const {
  nickname,
  avatarIndex = 0,
  expression = "neutral",
  width,
  height,
  outline = "medium",
  alt = "",
  ...attrs
} = Astro.props;

const src = `/casts/${nickname}/assets/avatars/${avatarIndex}/${expression}.png`;

const sizingStyle = css({
  w: "full",
  height: "[fit-content]",

  "& > *": {
    w: "[inherit]",
  },
});

const pictureAttributes = defu(
  {
    class: [sizingStyle, attrs.class].join(" "),
  },
  attrs,
);

const outlineMap = {
  none: 0,
  medium: 3,
  strong: 5,
} satisfies Record<Exclude<Props["outline"], undefined>, number>;

const sizes = `${remToSizePercent(width)}%, (max-width: ${SP_MAX_WIDTH}px) ${remToSizePercent(width) * SP_ROOT_FONT_SCALE}%`;
---

<CustomPicture
  src={src}
  crop={{
    width,
    height: "100%",
    top: 0,
    left: "50%",
  }}
  outline={{
    thickness: `${outlineMap[outline]}px`,
  }}
  alt={alt}
  width={width}
  widths={toWidths(width)}
  height={height}
  sizes={sizes}
  fit="cover"
  pictureAttributes={pictureAttributes}
/>
