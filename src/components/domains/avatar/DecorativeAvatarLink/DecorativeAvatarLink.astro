---
import { iconTypes } from "@/components/decoratives/Vectors/Icon/types";
import OrigamiShape from "@/components/decoratives/Shape/OrigamiShape/OrigamiShape.astro";
import { randomPick, seedRandom } from "@/lib/utils/random";
import { fetchAvatar, fetchCast } from "@lib/contents/casts";
import { pickColorBase } from "@lib/contents/commons/ColorToken";
import { css, cva } from "@styles/css";
// biome-ignore lint/style/useImportType: なぜか Biome がエラーにしてくるので回避
import AvatarImage from "../images/AvatarImage.astro";
import NameSeal from "./internals/NameSeals.astro";
import StripeCircle from "./internals/StripeCircle.astro";

type AvatarImageProps = Omit<Parameters<typeof AvatarImage>[0], "alt">;

interface Props extends AvatarImageProps {}

const { class: className, ...avatarImageProps } = Astro.props;

const { nickname } = avatarImageProps;

const { themeColor } = await fetchCast(nickname);

const { height: avatarHeight } = await fetchAvatar({ nickname });

if (!themeColor) {
  throw new Error(
    `themeColor is required, but cast data of ${nickname} has no themeColor`,
  );
}

const rootStyle = css({
  overflow: "visible",

  "& *": {
    pointerEvents: "none",
  },
});

const figureRoot = css({
  w: "32",
  h: "[inherit]",
  pos: "relative",
});

const origamiStyleRecipe = cva({
  base: {
    pos: "absolute",
    transform: "[translate(-50%, -50%)]",
    left: "[50%]",
    bottom: "[30%]",

    w: "32",
    h: "32",
  },
  variants: {
    position: {
      low: {
        bottom: "[10%]",
      },
      middle: {
        bottom: "[17.5%]",
      },
      high: {
        bottom: "[25%]",
      },
    },
  },
});

const position = (() => {
  if (avatarHeight > 80) {
    return "high";
  }

  if (avatarHeight > 60) {
    return "middle";
  }

  return "low";
})();

const origamiStyle = origamiStyleRecipe({
  position,
});

const imageStyle = css({
  pos: "absolute",
  bottom: "[10%]",
  left: "[50%]",
  transform: "[translate(-50%, 0)]",
  display: "block",
  zIndex: "front",
});

const circleStyle = css({
  pos: "absolute",
  left: "[40%]",
  top: "[50%]",
  transform: "[translate(-50%, -50%)]",
});

const nameStyleRecipe = cva({
  base: {
    pos: "absolute",
    left: "[50%]",
    bottom: "[10%]",

    textStyle: "decorative.bold.lg",
    textDecorationStyle: "solid",
    color: "white",
    zIndex: "float",
  },
  variants: {
    position: {
      low: {
        bottom: "[10%]",
      },
      middle: {
        bottom: "[17.5%]",
      },
      high: {
        bottom: "[25%]",
      },
    },
    rotate: {
      "0": {
        transform: "[translate(-50%, -50%)]",
      },
      "2.5": {
        transform: "[translate(-50%, -50%) rotate(2.5deg)]",
      },
      "5": {
        transform: "[translate(-50%, -50%) rotate(5deg)]",
      },
      "7.5": {
        transform: "[translate(-50%, -50%) rotate(7.5deg)]",
      },
      "10": {
        transform: "[translate(-50%, -50%) rotate(10deg)]",
      },
      "12.5": {
        transform: "[translate(-50%, -50%) rotate(12.5deg)]",
      },
      "15": {
        transform: "[translate(-50%, -50%) rotate(15deg)]",
      },
      "-2.5": {
        transform: "[translate(-50%, -50%) rotate(-2.5deg)]",
      },
      "-5": {
        transform: "[translate(-50%, -50%) rotate(-5deg)]",
      },
      "-7.5": {
        transform: "[translate(-50%, -50%) rotate(-7.5deg)]",
      },
      "-10": {
        transform: "[translate(-50%, -50%) rotate(-10deg)]",
      },
      "-12.5": {
        transform: "[translate(-50%, -50%) rotate(-12.5deg)]",
      },
      "-15": {
        transform: "[translate(-50%, -50%) rotate(-15deg)]",
      },
    },
  },
});

const random = seedRandom(nickname);

const shapeType = randomPick(1, [0, 1, 2, 3, 4, 5, 6, 7, 8] as const, random);

const origamiRotateType = randomPick(
  1,
  /**
   * 60, 120, 240, 300 度のみにする
   */
  [2, 4, 8, 10] as const,
  random,
);

const inverse = randomPick(1, [true, false] as const, random);

const colorName = pickColorBase(themeColor);

const icon = randomPick(1, iconTypes, random);

const nameRotateType = randomPick(
  1,
  [
    "0",
    "2.5",
    "5",
    "7.5",
    "10",
    "12.5",
    "15",
    "-2.5",
    "-5",
    "-7.5",
    "-10",
    "-12.5",
    "-15",
  ] as const,
  random,
);

const nameStyle = nameStyleRecipe({
  rotate: nameRotateType,
  position,
});
---

<a
  class:list={[rootStyle, className]}
  href={`/cast/${nickname}`}
  aria-label={`店員"${nickname}"の紹介ページ`}
>
  <figure class={figureRoot}>
    <OrigamiShape
      shape={shapeType}
      rotate={origamiRotateType}
      inverse={inverse}
      color={colorName}
      class={origamiStyle}
    />
    <StripeCircle class={circleStyle} />
    <AvatarImage
      {...avatarImageProps}
      class={imageStyle}
      alt={`${nickname} のアバター`}
      aria-hidden
    />
    <NameSeal name={nickname} color={colorName} icon={icon} class={nameStyle} />
  </figure>
</a>
