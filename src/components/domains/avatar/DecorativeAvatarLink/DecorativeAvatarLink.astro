---
import OrigamiShape from "@/components/decoratives/Shape/OrigamiShape/OrigamiShape.astro";
import { randomPick, seedRandom } from "@/lib/utils/random";
import { fetchCast } from "@lib/contents/casts";
import { pickColorBase } from "@lib/contents/commons/ColorToken";
import { css } from "@styles/css";
// biome-ignore lint/style/useImportType: なぜか Biome がエラーにしてくるので回避
import AvatarImage from "../AvatarImage/AvatarImage.astro";
import StripeCircle from "./internals/StripeCircle.astro";

type AvatarImageProps = Omit<Parameters<typeof AvatarImage>[0], "alt">;

interface Props extends AvatarImageProps {
  class?: string;
}

const { class: className, ...avatarImageProps } = Astro.props;

const { nickname } = avatarImageProps;

const { themeColor } = await fetchCast(nickname);

if (!themeColor) {
  throw new Error(
    `themeColor is required, but cast data of ${nickname} has no themeColor`,
  );
}

const rootStyle = css({
  w: "[inherit]",
  h: "full",
  overflow: "visible",

  "& *": {
    pointerEvents: "none",
  },
});

const figureRoot = css({
  w: "[inherit]",
  h: "[inherit]",
  pos: "relative",
});

const imageStyle = css({
  pos: "absolute",
  bottom: "0",
  left: "[50%]",
  transform: "[translate(-50%, 0)]",
  display: "block",
});

const random = seedRandom(nickname);

const shapeType = randomPick(1, [0, 1, 2, 3, 4, 5, 6, 7, 8] as const, random);

const rotateType = randomPick(
  1,
  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] as const,
  random,
);

const inverse = randomPick(1, [true, false] as const, random);

const colorName = pickColorBase(themeColor);
---

<a
  class:list={[rootStyle, className]}
  href={`/cast/${nickname}`}
  aria-label={`${nickname} の紹介ページ`}
>
  <figure class={figureRoot}>
    <OrigamiShape
      type={shapeType}
      rotate={rotateType}
      inverse={inverse}
      color={colorName}
    />
    <StripeCircle aria-hidden />
    <AvatarImage
      {...avatarImageProps}
      class={imageStyle}
      alt={`${nickname} のアバター`}
      aria-hidden
    />
  </figure>
</a>
