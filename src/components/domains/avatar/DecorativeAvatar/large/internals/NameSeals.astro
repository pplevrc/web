---
import { randomPick, seedRandom } from "@/lib/utils/random";
import type { ColorThemeBase } from "@lib/contents/commons/ColorToken";
import { css, cva } from "@styles/css";
import type { HTMLAttributes } from "astro/types";
import CharSeal from "./CharSeal.astro";

interface Props extends HTMLAttributes<"figcaption"> {
  /**
   *
   */
  name: string;

  /**
   *
   */
  color: ColorThemeBase;

  /**
   *
   */
  radius: "short" | "medium" | "long";
}

const { name, color, radius, ...attrs } = Astro.props;

const length = name.length;

const captionRootStyle = css({
  display: "contents",
});

const rootStyle = css({
  pos: "relative",
  w: "full",
  h: "full",
});

const charStyleRecipe = cva({
  base: {
    /**
     * 文字間角度
     */
    "--angle-step": "calc(var(--total-angle) / (var(--l) - 1))",

    /**
     * 各文字の角度位置
     */
    "--angle": "calc(var(--i) * var(--angle-step) + var(--offset))",

    /**
     * 1 文字目の始点角度
     */
    "--offset": {
      /**
       * 180 deg を中心に扇形に広げる
       */
      base: "calc(var(--pi) / 2 - var(--total-angle) / 2)",
      /**
       * pc の場合は少し始点を左の角度にずらす
       */
      _pc: "calc(var(--pi) / 2.5 - var(--total-angle) / 2)",
    },

    /**
     * 最初の文字から最後の文字までの角度
     */
    "--total-angle": {
      /**
       * mobile
       * 最小 2 文字で 60 deg (pi / 3)
       * 最大 9 文字で 90 deg (pi / 2)
       */
      base: "calc((var(--pi) / 3) + (clamp(0, var(--l) - 2 / 7, 1) * ((var(--pi) / 4) - (var(--pi) / 3))))",
      /**
       * PC
       * 最小 2 文字で 40 deg (pi / 4.5)
       * 最大 9 文字で 105 deg
       */
      _pc: "calc((var(--pi) / 4.5) + (clamp(0, (var(--l) - 2) / 7, 1) * ((var(--pi) * 0.583) - (var(--pi) / 4.5))))",
    },

    /**
     * 半径 (18rem 固定)
     */
    "--radius": "22rem",

    /**
     * 中心座標
     */
    "--center-x": "50%",
    "--center-y": {
      base: "30%",
      _pc: "50%",
    },

    /**
     * 円の中心
     */
    top: "[calc(50% - var(--radius) * sin(var(--angle)))]",
    left: "[calc(50% - var(--radius) * cos(var(--angle)))]",

    pos: "absolute",
    transform: "translate(-50%, -50%)",
  },
  variants: {
    radius: {
      short: {
        _pc: {
          "--radius": "15rem",
        },
      },
      medium: {
        _pc: {
          "--radius": "17.5rem",
        },
      },
      long: {
        _pc: {
          "--radius": "20rem",
        },
      },
    },
  },
});

const charStyle = charStyleRecipe({ radius });

const random = seedRandom(name);

const size = name.length > 6 ? "small" : "regular";
---

<figcaption {...attrs} class={captionRootStyle}>
  {/* a11y 用 */}
  <p hidden translate="no">
    {name}
  </p>

  {/* 視覚用 */}
  <p class={rootStyle} aria-hidden role="presentation">
    {
      Array.from({ length }).map((_, index) => {
        const char = name[index];
        /**
         * 1, 2, 3 の発生確率を下げる
         */
        const variant = randomPick(1, [0, 0, 0, 0, 1, 2, 3] as const, random);

        const variables = {
          "--i": index,
          "--l": length,
        };

        switch (variant) {
          case 0:
            return (
              <CharSeal
                color={color}
                size={size}
                class={charStyle}
                style={variables}
              >
                {char}
              </CharSeal>
            );
          case 1:
            return (
              <CharSeal
                color={color}
                size={size}
                folded
                class={charStyle}
                style={variables}
              >
                {char}
              </CharSeal>
            );
          case 2:
            return (
              <CharSeal
                color={color}
                size={size}
                deep
                class={charStyle}
                style={variables}
              >
                {char}
              </CharSeal>
            );
          case 3:
            return (
              <CharSeal
                color={color}
                size={size}
                folded
                deep
                class={charStyle}
                style={variables}
              >
                {char}
              </CharSeal>
            );
        }
      })
    }
  </p>
</figcaption>
