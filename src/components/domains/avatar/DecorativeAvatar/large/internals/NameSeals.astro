---
import { css, cva } from "@styles/css";
import CharSeal from "./CharSeal.astro";
import type { ColorThemeBase } from "@lib/contents/commons/ColorToken";
import type { HTMLAttributes } from "astro/types";
import { randomPick, seedRandom } from "@/lib/utils/random";

interface Props extends HTMLAttributes<"figcaption"> {
  /**
   *
   */
  name: string;

  /**
   *
   */
  color: ColorThemeBase;

  /**
   *
   */
  radius: "short" | "medium" | "long";
}

const { name, color, radius, ...attrs } = Astro.props;

const length = name.length;

const captionRootStyle = css({
  display: "contents",
});

const rootStyle = css({
  pos: "relative",
  w: "full",
  h: "full",
});

const charStyleRecipe = cva({
  base: {
    /**
     * 最小 2 文字で 45 deg (pi / 4)
     * 最大 6 文字で 90 deg (pi / 2)
     */
    "--total-angle":
      "calc((var(--pi) / 4) + (clamp(0, var(--l) - 2, 3) / 3 * (var(--pi) / 4)))",
    "--angle-step": `calc(var(--total-angle) / (var(--l) - 1))`,
    /**
     *
     */
    "--offset": "calc(var(--pi) / 2.5 - var(--total-angle) / 2)",
    "--angle": `calc(var(--i) * var(--angle-step) + var(--offset))`,

    pos: "absolute",
    top: "[calc(50% - var(--radius) * sin(var(--angle)))]",
    left: "[calc(50% - var(--radius) * cos(var(--angle)))]",
    transform: "translate(-50%, -50%)",
  },
  variants: {
    radius: {
      short: {
        "--radius": "15rem",
      },
      medium: {
        "--radius": "17.5rem",
      },
      long: {
        "--radius": "20rem",
      },
    },
  },
});

const charStyle = charStyleRecipe({ radius });

const random = seedRandom(name);
---

<figcaption {...attrs} class={captionRootStyle}>
  {/* a11y 用 */}
  <p hidden translate="no">
    {name}
  </p>

  {/* 視覚用 */}
  <p class={rootStyle}>
    {
      Array.from({ length }).map((_, index) => {
        const char = name[index];
        /**
         * 1, 2, 3 の発生確率を下げる
         */
        const variant = randomPick(1, [0, 0, 0, 0, 1, 2, 3] as const, random);

        const variables = {
          "--i": index,
          "--l": length,
        };

        switch (variant) {
          case 0:
            return (
              <CharSeal color={color} class={charStyle} style={variables}>
                {char}
              </CharSeal>
            );
          case 1:
            return (
              <CharSeal
                color={color}
                folded
                class={charStyle}
                style={variables}
              >
                {char}
              </CharSeal>
            );
          case 2:
            return (
              <CharSeal color={color} deep class={charStyle} style={variables}>
                {char}
              </CharSeal>
            );
          case 3:
            return (
              <CharSeal
                color={color}
                folded
                deep
                class={charStyle}
                style={variables}
              >
                {char}
              </CharSeal>
            );
        }
      })
    }
  </p>
</figcaption>
