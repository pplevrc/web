---
import type { ColorThemeBase } from "@/lib/contents/commons/ColorToken";
import { hash } from "@lib/utils/random";
import { css } from "@styles/css";
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"svg"> {
  /**
   * SVG を `<symbol>` として定義するかどうか.
   * `true` にすると、`<symbol>` が返され, アイコンの SVG 定義が含まれます.
   * `false` にすると、`<use>` が返され, 事前に定義された SVG を参照します.
   */
  definition?: boolean;

  /**
   *
   */
  theme?: ColorThemeBase;
}

const { definition = false, theme = "smoke", ...props } = Astro.props;

const rootStyle = css({
  colorPalette: theme,
  w: "40",
  h: "32",

  "& path": {
    shadow: "xs",
  },

  "& *[data-theme-outside]": {
    fill: "colorPalette.bg",
  },

  "& *[data-theme-inside]": {
    fill: "colorPalette.lite",
  },
});

const symbolId = hash("shape-letter");
---

<svg
  viewBox="0 0 164 130"
  xmlns="http://www.w3.org/2000/svg"
  class:list={[rootStyle, props.class]}
  {...props}
>
  {
    definition ? (
      <symbol id={symbolId} viewBox="0 0 164 130">
        <g>
          <path
            d="M 29.7 1 H 162 V 98.2 L 138.2 129 H 2 V 30.8 Z"
            fill="#ffffff"
          />
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            data-theme-outside
            d="M 53.8 30.1 29.3 1.3 30 0.7 112.3 97.2 H 162 v 1 h -48.8 l 25.4 29.8 -0.8 0.6 L 54.7 31.1 H 2 v -1 z"
          />
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            data-theme-inside
            d="M 29.4 0.5 H 162.5 V 98.4 L 138.5 129.5 H 1.5 V 30.6 Z m 0.4 1 L 2.5 31 V 128.5 H 138 L 161.5 98 V 1.5 Z"
          />
        </g>
      </symbol>
    ) : (
      <use href={`#${symbolId}`} />
    )
  }
</svg>
