---
import type { UnionArrayIndex } from "@/lib/utils/arithmetic-types";
import type { ColorName } from "lib/styles/tokens/colors";
import OrigamiFoldShape1 from "./internals/OrigamiFoldShape1.astro";
import OrigamiFoldShape2 from "./internals/OrigamiFoldShape2.astro";
import OrigamiFoldShape3 from "./internals/OrigamiFoldShape3.astro";
import OrigamiFoldShape4 from "./internals/OrigamiFoldShape4.astro";
import OrigamiFoldShape5 from "./internals/OrigamiFoldShape5.astro";
import OrigamiFoldShape6 from "./internals/OrigamiFoldShape6.astro";
import OrigamiFoldShape7 from "./internals/OrigamiFoldShape7.astro";
import OrigamiFoldShape8 from "./internals/OrigamiFoldShape8.astro";
import OrigamiFoldShape9 from "./internals/OrigamiFoldShape9.astro";

/**
 * 1 ~ 9 まである
 * 1 は長方形, 9 は直角三角形. 間はそれぞれに近くなる
 * 折り紙を１回折ったときの形状.
 */
const shapeTypes = [
  "fold-1",
  "fold-2",
  "fold-3",
  "fold-4",
  "fold-5",
  "fold-6",
  "fold-7",
  "fold-8",
  "fold-9",
] as const;

type ShapeType = (typeof shapeTypes)[number];

type ShapeIndex = UnionArrayIndex<typeof shapeTypes>;

// 30 度ずつ回転
const rotateTypes = [
  "0",
  "30",
  "60",
  "90",
  "120",
  "150",
  "180",
  "210",
  "240",
  "270",
  "300",
  "330",
] as const;

type RotateType = (typeof rotateTypes)[number];

type RotateIndex = UnionArrayIndex<typeof rotateTypes>;

interface Props {
  /**
   *
   */
  type: ShapeType | ShapeIndex;

  /**
   *
   */
  rotate: RotateType | RotateIndex;

  /**
   * @default random
   */
  inverse?: boolean;

  /**
   *
   */
  color?: ColorName;
}

const { type, rotate, inverse, color } = Astro.props;

const ShapeMap = {
  "fold-1": OrigamiFoldShape1,
  "fold-2": OrigamiFoldShape2,
  "fold-3": OrigamiFoldShape3,
  "fold-4": OrigamiFoldShape4,
  "fold-5": OrigamiFoldShape5,
  "fold-6": OrigamiFoldShape6,
  "fold-7": OrigamiFoldShape7,
  "fold-8": OrigamiFoldShape8,
  "fold-9": OrigamiFoldShape9,
};

const Shape =
  typeof type === "string"
    ? ShapeMap[type as ShapeType]
    : ShapeMap[shapeTypes[type] as ShapeType];

if (!Shape) {
  throw new Error(`Invalid shape type: ${type}`);
}

// @ts-ignore TODO
const rotateType = typeof rotate === "string" ? rotate : rotateTypes[rotate];

// const rotateStyle = origamiStyle({ rotate: rotateType, inverse, color });

const rotateStyle = "";

console.log(
  "rotate: ",
  rotate,
  "inverse: ",
  inverse,
  "color: ",
  color,
  "class: ",
  rotateStyle,
);
---

<Shape class={rotateStyle} />
