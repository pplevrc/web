---
import { PC_VIEWPORT_WIDTH } from "@lib/browsers/breakpoint";

type Extension = "mp4" /* | "webm" | "ogg" */;

type Media = "pc" | "sp";

type Sources = {
  [_ in Extension]?: {
    [_ in Media]?: string;
  };
};

type VideoProps = Partial<{
  [K in keyof HTMLVideoElement]: HTMLVideoElement[K] extends
    | string
    | number
    | boolean
    ? HTMLVideoElement[K]
    : never;
}>;

interface Props extends VideoProps {
  sources: Sources;
}

const { sources, ...props } = Astro.props;

type FlattenSources = [Extension, Media, string][];

const flattenSources: FlattenSources = (() => {
  const source: FlattenSources = [];
  for (const ext in sources) {
    for (const media in sources[ext as Extension]) {
      source.push([
        ext as Extension,
        media as Media,
        // biome-ignore lint/style/noNonNullAssertion: <explanation>
        sources[ext as Extension]![media as Media]!,
      ]);
    }
  }
  return source;
})();

function toMediaQuery(media: Media): string | undefined {
  switch (media) {
    case "pc":
      return `(min-width: ${PC_VIEWPORT_WIDTH}px)`;
    case "sp":
      return undefined;
  }
}

function toFileType(ext: Extension): string {
  switch (ext) {
    case "mp4":
      return "video/mp4";
  }
}
---

<video {...props as any}>
  {
    flattenSources.map(([ext, media, src]) => (
      <source src={src} type={toFileType(ext)} media={toMediaQuery(media)} />
    ))
  }
  <slot />
</video>
