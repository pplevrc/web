---
import ResponsiveVideo, {
  type Sources,
} from "@components/commons/ResponsiveVideo/ResponsiveVideo.astro";

// for poster image
// @ts-ignore ファイルが動的に作られるため
import thumbnail from "@assets/videos/top.generated.thumbnail.webp";

const props = Astro.props;

const isDev = process.env["NODE_ENV"] !== "production";

let sources: Sources[];

if (isDev) {
  // for development mode
  // 開発向けにはエンコードが最も早い H264 のみを表示する
  // @ts-ignore ファイルが動的に作られるため
  const movieDevPcH264 = (
    await import("@assets/videos/top-pc.generated.dev.h264.mp4")
  ).default;
  // @ts-ignore ファイルが動的に作られるため
  const movieDevSpH264 = (
    await import("@assets/videos/top-sp.generated.dev.h264.mp4")
  ).default;

  const devSources: Sources[] = [{ pc: movieDevPcH264, sp: movieDevSpH264 }];
  sources = devSources;
} else {
  // for production mode
  // VP9 対応ブラウザがすでに大半浸透しているため, これをサポートの下限にする
  // @ts-ignore ファイルが動的に作られるため
  const movieProdPcAv1 = (
    await import("@assets/videos/top-pc.generated.av1.webm")
  ).default;
  // @ts-ignore ファイルが動的に作られるため
  const movieProdPcVp9 = (
    await import("@assets/videos/top-pc.generated.vp9.webm")
  ).default;
  // @ts-ignore ファイルが動的に作られるため
  const movieProdSpAv1 = (
    await import("@assets/videos/top-sp.generated.av1.webm")
  ).default;
  // @ts-ignore ファイルが動的に作られるため
  const movieProdSpVp9 = (
    await import("@assets/videos/top-sp.generated.vp9.webm")
  ).default;

  const prodSources: Sources[] = [
    { pc: movieProdPcAv1, sp: movieProdSpAv1 },
    { pc: movieProdPcVp9, sp: movieProdSpVp9 },
  ];
  sources = prodSources;
}
---

<ResponsiveVideo
  muted
  autoplay
  playsinline
  disableRemotePlayback
  loop
  aria-label="ロリっ子喫茶ぷぷりえの紹介ムービー"
  preload="metadata"
  poster={thumbnail.src}
  sources={sources}
  {...props}
/>
