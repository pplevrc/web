---
import DecorativeLink from "@components/decoratives/Links/DecorativeLink/DecorativeLink.astro";
import DecorativeAvatarLink from "@components/domains/avatar/DecorativeAvatarLink/DecorativeAvatarLink.astro";
import { fetchNextCast, fetchPrevCast } from "@lib/contents/casts";
import type { ColorThemeBase } from "@lib/contents/commons/ColorToken";
import { fetchMeta } from "@lib/contents/meta";
import { css } from "@styles/css";

interface Props {
  nickname: string;

  themeColor: ColorThemeBase;
}

const { nickname, themeColor } = Astro.props;

const prevCast = await fetchPrevCast(nickname);
const nextCast = await fetchNextCast(nickname);

const {
  casts: { backLinkLabel },
} = await fetchMeta();

const rootStyle = css({
  h: "112",
  py: "12",

  bg: "colorPalette.50/70",
  colorPalette: themeColor,

  display: "flex",
  flexDirection: "column",
  alignItems: "center",
  justifyContent: "space-around",
});

const listStyle = css({
  display: "flex",
  flexDirection: "row",
  alignItems: "center",
  justifyContent: "space-between",

  gap: {
    base: "8",
    _pc: "16",
  },
});

const listItemStyle = css({
  _motionSafe: {
    _hover: {
      transition: "transform",
      transitionDuration: "faster",
      transform: "[scale(1.1)]",
    },
  },
});

const navItems = [prevCast, nextCast];
---

<nav class={rootStyle} aria-label="他の店員さんへのナビゲーション">
  <ul class={listStyle}>
    {
      navItems.map(({ profile: { nickname } }) => (
        <li class={listItemStyle}>
          <DecorativeAvatarLink
            size="small"
            nickname={nickname}
            expression="neutral"
            avatarIndex={0}
            width={120}
            height={120}
          />
        </li>
      ))
    }
  </ul>
  <DecorativeLink themeColor={themeColor} href="/casts">
    {backLinkLabel}
  </DecorativeLink>
</nav>
