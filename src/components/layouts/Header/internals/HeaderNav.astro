---
import SocialLink from "@components/decoratives/Links/SocialLink/SocialLink.astro";
import { getMeta } from "@content/meta";
import { href } from "@lib/utils/base-path";
import { hash } from "@lib/utils/random";
import { css } from "@styles/css";
import HamburgerIconButton from "./HamburgerIconButton.astro";
import HeaderLogo from "./HeaderLogo.astro";
import HeaderNavItem from "./HeaderNavItem.astro";

const rootStyle = css({
  px: "42",
  h: "12",
  pos: "relative",

  '& [role="button"]': {
    pos: "absolute",
    top: "0",
    right: "2",
    zIndex: "top",

    _pc: {
      display: "none",
    },
  },
});

const responsiveNavControlsStyle = css({
  "& > [data-nav-content]": {
    display: "none",

    _pc: {
      display: "flex",
    },
  },

  _spOnly: {
    "&:has(:checked)": {
      "& > [data-nav-content]": {
        display: "flex",
        zIndex: "header",

        animation: "fadeIn",
        animationFillMode: "both",
        animationDuration: "fast",

        pos: "absolute",
        top: "0",
        left: "0",
        w: "[100vw]",
        h: "[100vh]",
        bg: "white/90",
      },
    },
  },
});

const navContentStyle = css({
  // responsiveNavControlsStyle で display: "flex" を設定しているので、ここでは設定しない
  // display: "flex",
  flexDir: "column",
  placeItems: "center",
  justifyContent: "center",
  gap: "16",

  _pc: {
    flexDir: "row",
    justifyContent: "flex-end",
    alignItems: "center",
    gap: "8",
  },
});

const navMainStyle = css({
  display: "flex",
  flexDir: "column",
  gap: "6",

  _pc: {
    flexDir: "row",
  },
});

const navSNSStyle = css({
  display: "flex",
  flexDir: "row",
  gap: "6",

  _pc: {
    gap: "2",
  },
});

const logoStyle = css({
  position: "absolute",
  display: "block",
  zIndex: "sticky",

  top: "1",
  left: "7",

  _pc: {
    left: "42",
  },
});

const linkStyle = css({
  _pc: {
    transform: "[scale(0.8)]",
  },
});

const navigationId = hash("global-navigation");

const {
  articles: { title: articlesTitle },
  guidelines: { title: guidelinesTitle },
  casts: { title: castsTitle },
  home: { title: homeTitle },
  official: { socialLinks },
} = await getMeta();
---

<nav
  class:list={[rootStyle, responsiveNavControlsStyle]}
  aria-label="グローバルナビゲーション"
  id={navigationId}
  data-auto-expanded="target"
>
  <HamburgerIconButton
    aria-label="グローバルナビゲーションを開く"
    aria-controls={navigationId}
    data-auto-expanded="source"
  />
  <HeaderLogo class={logoStyle} />
  <div data-nav-content class={navContentStyle}>
    <ul class={navMainStyle}>
      <li>
        <HeaderNavItem label={homeTitle} path={href("/")} />
      </li>
      <li>
        <HeaderNavItem label={articlesTitle} path={href("/articles")} />
      </li>
      <li>
        <HeaderNavItem label={castsTitle} path={href("/casts")} />
      </li>
      <li>
        <HeaderNavItem label={guidelinesTitle} path={href("/guidelines")} />
      </li>
    </ul>
    <ul class={navSNSStyle}>
      {
        socialLinks.map((link) => (
          <li>
            <SocialLink {...link} variant="vector-dark" class={linkStyle} />
          </li>
        ))
      }
    </ul>
  </div>
  <script>
    const expandedStateEls = document.querySelectorAll(
      "[data-auto-expanded='source']",
    );
    const targetEls = document.querySelectorAll(
      "[data-auto-expanded='target']",
    );

    for (const inputEl of expandedStateEls) {
      inputEl.addEventListener("change", updateAriaExpanded);
    }

    window.addEventListener("resize", updateAriaExpanded);

    function updateAriaExpanded(event: Event) {
      const opened = (event.target as HTMLInputElement).checked;
      const pc = window.innerWidth >= 1440;

      const newState = pc ? "undefined" : opened.toString();

      for (const targetEl of targetEls) {
        targetEl.ariaExpanded = newState;
      }

      const newChecked = pc ? false : opened;

      for (const inputEl of expandedStateEls) {
        if (inputEl !== event.target) {
          (inputEl as HTMLInputElement).checked = newChecked;
        }
      }
    }
  </script>
</nav>
