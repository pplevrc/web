---
import type { OptionalIconType } from "@components/decoratives/Vectors/Icon/types";
import type { OptionalLogoIconType } from "@components/decoratives/Vectors/LogoIcon/types";
import type { ShapeType } from "@components/decoratives/Vectors/Shapes/types";
import Footer from "@components/layouts/Footer/Footer.astro";
import {
  type DescriptionMetaProps,
  default as HeadMeta,
} from "@components/layouts/HeadMeta";
import Header from "@components/layouts/Header/Header.astro";
import { default as TemplateDefinition } from "@components/layouts/TemplateDefinition/TemplateDefinition.astro";
import type { ColorThemeBase } from "@lib/contents/commons/ColorToken";
import { css, cva } from "@styles/css";

interface Props {
  headMeta: DescriptionMetaProps;
  defineIcons?: OptionalIconType[];
  defineLogos?: OptionalLogoIconType[];
  defineShapes?: ShapeType[];
  themeColor?: ColorThemeBase;

  mainClass?: string;
  "mainClass:list"?: string[];
  rootClass?: string;
  "rootClass:list"?: string[];
}

const {
  headMeta: { title, description, keywords, ogp },
  defineIcons,
  defineLogos,
  defineShapes,
  mainClass,
  "mainClass:list": mainClassList = [],
  rootClass,
  "rootClass:list": rootClassList = [],
  themeColor,
} = Astro.props;

const hideScroll = css({
  _spOnly: {
    "&:has(header *:checked)": {
      overflow: "hidden",
    },
  },
});

const backgroundClassRecipe = cva({
  base: {
    pos: "relative",

    _before: {
      content: "''",
      pos: "absolute",
      top: "0",
      left: "0",
      width: "full",
      height: "full",
      bgSize: "[5.0625rem, 5.0625rem]",
      zIndex: "backgroundBase",
    },
  },
  variants: {
    color: {
      smoke: {
        _before: {
          bgGradient: "smoke.checkered",
        },
      },
      olive: {
        _before: {
          bgGradient: "olive.checkered",
        },
      },
      berry: {
        _before: {
          bgGradient: "berry.checkered",
        },
      },
      honey: {
        _before: {
          bgGradient: "honey.checkered",
        },
      },
      soda: {
        _before: {
          bgGradient: "soda.checkered",
        },
      },
      rose: {
        _before: {
          bgGradient: "rose.checkered",
        },
      },
      matcha: {
        _before: {
          bgGradient: "matcha.checkered",
        },
      },
      latte: {
        _before: {
          bgGradient: "latte.checkered",
        },
      },
      lavender: {
        _before: {
          bgGradient: "lavender.checkered",
        },
      },
      carrot: {
        _before: {
          bgGradient: "carrot.checkered",
        },
      },
      ice: {
        _before: {
          bgGradient: "ice.checkered",
        },
      },
      mint: {
        _before: {
          bgGradient: "mint.checkered",
        },
      },
    },
  },
  defaultVariants: {
    color: "smoke",
  },
});

const backgroundClass = backgroundClassRecipe({ color: themeColor });
---

<!doctype html>
<html lang="ja" dir="ltr">
  <head>
    <slot name="head" />
    <HeadMeta title={title} description={description} keywords={keywords} ogp={ogp} />
  </head>

  <body class:list={[hideScroll, rootClass, ...rootClassList]}>
    <TemplateDefinition
      defineIcons={defineIcons}
      defineLogos={defineLogos}
      defineShapes={defineShapes}
    >
      <slot name="template-definition" />
    </TemplateDefinition>
    <Header />
    <main class:list={[backgroundClass, mainClass, ...mainClassList]}>
      <slot />
    </main>
    <Footer />
  </body>
</html>
